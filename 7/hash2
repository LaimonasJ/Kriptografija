#  -*- coding: utf-8 -*-
#2 Spejimo keliu

getBin = lambda x, n: x >= 0 and str(bin(x))[2:].zfill(n) or "-" + str(bin(x))[3:].zfill(n)
abc_h='ABCDEFGHIJKLMNOP' # h-funcijos reikšmių abėcėlė
def e(m,k): #Kriptosistema
    f=lambda u,v,w:u^^((v*v+77*w)%256)
    c=[m[1],f(m[0],m[1],k[0])]
    return [c[1],f(c[0],c[1],k[1])]

def code(m): 
    e=getBin(m[0],8)+getBin(m[1],8)
    h=''
    for i in range(0,4):
        h+=abc_h[int(e[4*i:4*i+4],2)]
    return h

def decod(s): #h-funkcijos reikšmė į bitus
    bt=lambda r: bin(16^^r)[3:]
    b=''
    for c in s:
        if c in abc_h:
            b+=bt(abc_h.index(c))
    return b
def hf(h0,r,s): # h-funkcija
    h=[ord(h0[0]),ord(h0[1])]
    k=[ord(r[0]),ord(r[1])]
    l=len(s)
    if l%2==1:
         s=s+s[0]
         l+=1
    for i in range(0,l//2):
        m=[ord(s[2*i])^^h[0],ord(s[2*i+1])^^h[1]]
        h=e(m,k)
    return code(h)

#vilkas||u_1u_2, vilkas||u_1u_2u_1u2, vilkas||u_1u_2...u_1u_2

zodis = 'vilkas'
r='va'
h0='vi'

for i in range (0, 256):
    for j in range (0, 256):
        priedas = "" + chr(i) + chr(j)
        if hf(h0,r,zodis+priedas) == hf(h0,r,zodis+priedas+priedas) and hf(h0,r,zodis+priedas) == hf(h0,r,zodis+priedas+priedas+priedas):
            print (hf(h0,r,zodis+priedas), hf(h0,r,zodis+priedas+priedas),hf(h0,r,zodis+priedas+priedas+priedas),hf(h0,r,zodis+priedas+priedas+priedas+priedas),i,j, chr(i), chr(j))

from collections import defaultdict

sifras = unicode("""KTŠBA LEŽAŠ IHĖĮZ RIĖSD ČZJČI 
JAĖIK DRAKO ĮĄTĘB ZFLIU ĘYĄCI 
OFTĘH FAKGC ĄTĘJI JĘNČG MIĖŽČ 
ĮUSKK UBTKS JBJUF ODUFA ĖCCAH 
AYCŲO BSŽKD ĘGDDŪ ŠAGIJ SNZKS 
CSKČČ SKSGP ĮTVĖŽ LRDCG ZOĖIE 
ŠYGBE JTDĖĘ OĄCIU ŽOĮFT SBJSĘ 
NGBAI ĄTYŠĖ OCKPH LSGŽĮ SDĮVŲ 
YJIGC NHĘUH ĘKĘBU OCŽĮG MCYFU 
ĘIMFĘ DBŲĄC GYĖOK SDOĮT ĮHIĖĖ 
ACCJV BZCĘT AJVCĮ MAFOE HCĮRI 
KLJAF TCTPĮ BIKCI ĖIGSG DMKOK 
SKĮIU ĘKPGR GSĖDE RSŪSD ČJAYY 
TLGSS GZOIA IĮTĘG KYKTĘ JIRVH 
ŪĮOĮĄ TĘBZF LKCŪI ĄLĖOK JCYNZ 
ŪBSSF ĮČVCS DLŪIĘ KDFĘA GVMĖĮ 
OĮTDĮ GSAHJ ERVCF UHB   """, 'utf-8').replace('\n', '').replace(' ', '')
abc=unicode('AĄBCČDEĘĖFGHIĮYJKLMNOPRSŠTUŲŪVZŽ','utf-8')
n=len(abc)

print sifras
print abc

def freq(text):
    d = defaultdict(int)
    s=""
    for w in text:
        if w in abc:
            d[w] += 1                   
    for w in sorted(d, key=d.get, reverse=True):
        s+=w
    return s

def friedm(text,k):
    textn=unicode("",'utf-8')
    for r in text:
        if r in abc:
            textn+=r
    l=len(textn)
    s=0
    for i in range(k,l):
        if textn[i]==textn[i-k] :
            s+=1
    return  1.*s/(l-k)  



def guess(test, k, sifr): #test - dažniausių raidžių eilutė, k - spėjamas šifro raktas
    tst=unicode('','utf-8')
    for r in test:
        if r in abc:
            tst+=r    
    tstk=unicode('','utf-8')
    for r in tst:
        tstk+=abc[(abc.index(r)+k)%n]
    d = defaultdict(int)
    sifrn=unicode('','utf-8')
    for r in sifr:
        if r in abc: sifrn+=r
    for r in sifrn:
        if r in tstk: d[r]+=1
    kiek=len(sifrn)
    s=0
    for a in d.keys(): s+=d[a]
    return float(s/kiek)




def prepare(text): #remove non-ascii
    textn=unicode("", 'utf-8')
    for a in text:
        if a in abc:
            textn+=a
    return textn.upper()


def split(text,d):
    textn=prepare(text)
    tspl=['']*d
    n=len(textn)
    for i in range(0,n):
        tspl[i%d]+=textn[i]
    return tspl    


def freq(text):
    d = defaultdict(int)
    s=""
    for w in text:
        if w in abc:
            d[w] += 1                   
    for w in sorted(d, key=d.get, reverse=True):
        s+=w
    return s

def Vigenere(text,key): #Vigenere cipher
    textn=prepare(text)
    keyn=prepare(key)
    textc=u""
    keys=[]
    lk=len(keyn)
    for i in range(0,lk):
        keys.append(abc.index(keyn[i]))
    lt=len(textn)
    for i in range(0,lt):
        textc+=abc[(abc.index(textn[i])-keys[i%lk])%n]
    return textc
    
dazn = "IASORET"   #dazniausios lietuviu kalbos raides 

#ieskom rakto ilgio.
#tikrinam, kas kiek daugiausia pasikartojimu.
#su didziausia reiksme indeksas - rakto ilgis
for i in range(1,11):
    print friedm(sifras,i), i
    
    
#padalinam teksta i tiek eiliu, kokio ilgio raktas
sif = split(sifras, 6)

#kiekvienam raktui tikrinam visas raides. Geriausia rakto raide yra ta, kur didziausias guess (turetu buti arti 0.5, nes IASORET sudaro ~50% raidziu)
#tiketina pirmam stulpelyje rasti rakta
for s in sif:
    spejimai = sorted([(guess(dazn,i,s), abc[i]) for i in range(0, len(abc))], key=lambda tup: tup[0], reverse=True)[:5]
    print spejimai

#tikrinam teksta
print Vigenere(sifras, 'STORAS')

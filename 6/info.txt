#http://www.mif.vu.lt/katedros/matinf/asm/vs/pask/crypto_prot/crppr.htm

#6 uzduotis

#Padaryti frequency, pairs, autocorrelation
#Pirma randam T reiksmes, tada lyginam su pasiskirstymo funkcijom
#Uzsifruotas tekstas turetu tureti mazesnes p reiksmes.

#pavertimas i bitus
def arrayToBits(array):
    getBin = lambda x, n: x >= 0 and str(bin(x))[2:].zfill(n) or "-" + str(bin(x))[3:].zfill(n)
    st = ""
    for i in array:
        st = st + getBin(i, 8)
    return st

# Chi-kvadrat su m laisvės laipsnių p- reikšmė  t-reiksme su kuria lyginama
def getChiSquared(m, t):
    T = RealDistribution('chisquared', m)
    p=1-T.cum_distribution_function(t)
    return p

# Standartinio normaliojo dėsnio p reikšmė
def getNormalDistribution(t):
    N= RealDistribution('gaussian', 1)
    p=1-N.cum_distribution_function(t)
    return p

#Gaunam T. Kiek 0 ir 1. Kuo mazesnis T, tuo eilute labiau atsitiktine.
def frequencyTest(bitString):
    n0 = 0
    n1 = 0
    for b in bitString:
        if b == '0':
            n0 += 1
        else:
            n1 += 1
    #print (n0, n1, len(bitString))
    T = ((n0 - n1) ^ 2)/len(bitString)
    return T


#Bitu poru testas
def bitPairTest(bitString):
    n00, n01, n10, n11, n0, n1 = 0, 0, 0, 0, 0, 0
    n = len(bitString)
    pirmasBitas = bitString[0]
    for b in bitString[1:]:
        if pirmasBitas == '0':
            n0 += 1
            if b == '0':
                n00 += 1
            else:
                n01 += 1
        else:
            n1 += 1
            if b == '0':
                n10 += 1
            else:
                n11 += 1
        pirmasBitas = b
    if bitString[n - 1] == '0':
        n0 += 1
    else:
        n1 += 1
    T = float(4) / (n - 1) * (n00^2+n01^2+n10^2+n11^2) - 2 / n * (n0^ 2 + n1 ^ 2) + 1
    #print (n00, n01, n10, n11, n0, n1, n)
    return T
    
#testas, kiek dazanai pasikartoja bitu sekos. d turi buti tarp 1 ir n/2
#Nezinau koki d pasirinkt. Ar testa daryti su visais d, ar su atsitiktiniu vienu.
def autocorrelationTest(bitString, d):
    n = len(bitString)
    Xd = 0
    if d < 1 or d > n/2:
        d = int(n/4)
    for i in range(0, n-d):
        Xd += int(bitString[i]) ^^ int(bitString[i+d])
    #print (d, Xd)
    T = (2 * Xd - n + d)/sqrt(n - d)
    return T

#reikia bitu masyvo ir ribos, ties kuria testas nepaeina (p)
def runTests(intArray, p):
    b = arrayToBits(intArray)
    ft = frequencyTest(b)
    pf = getChiSquared(1, ft)
    
    print "Daznio testas"
    print ("T1 = " + str(float(ft)))
    print ("p  = " + str(float(pf)))
    if pf < p:
        print ("Seka nera atsitiktine")
    else:
        print ("Seka atsitiktine")
    
    pt = bitPairTest(b)
    pp = getChiSquared(2, pt)
    
    print "Bitu poru testas"
    print ("T2 = " + str(float(pt)))
    print ("p  = " + str(float(pp)))
    if pp < p:
        print ("Seka nera atsitiktine")
    else:
        print ("Seka atsitiktine")
    
    
    print "Autokoreliacijos testas"
#    atsitiktine = True
#    for d in range (1, len(b) / 2):
#        at = autocorrelationTest(b, 0)
#        pa = getNormalDistribution(at)
#        if pa < p:
#            atsitiktine = False
#            break            
#    if not atsitiktine:
#        print ("Seka nera atsitiktine su d = " + str(float(d)))
#    else:
#        print ("Seka atsitiktine")    
        
    at = autocorrelationTest(b, 0)
    pa = getNormalDistribution(at)
    print ("T5 = " + str(float(at)))
    print ("p  = " + str(float(pa)))
    if pa < p:
        print ("Seka nera atsitiktine")
    else:
        print ("Seka atsitiktine")

        
# The system of linear feedback registers
def stream(c,xp,n):  # the keystream generation, c-coefficients, xp - initial state, n - number of bits
    x=[0,0,0,0,0,0,0,0]
    for i in range(0,8):
        x[i]=xp[i]
    sr=''
    for i in range(0,n):
        bt=0
        sr+=str(x[0])
        for j in range(0,8):
            bt+=c[j]*x[j]
        for j in range(1,8):
            x[8-j]=x[7-j]
        x[0]=bt%2
    return sr

#stream cipher
def str_cipher(t,c,xp): # t - plaintext (ASCII decimal list), c-coefficients, xp - initial state
    cp=[]
    k=len(t)
    sr=stream(c,xp,8*k)
    for i in range (0,k):
        cp.append(t[i]^^int(sr[8*i:8*i+8],2))
    return cp        
    
sifras1 = [152, 58, 221, 87, 65, 24, 198, 254, 251, 68, 224, 176, 139, 192, 167, 55, 120, 245, 5, 35, 128, 136, 107, 30, 106, 73, 170, 121, 164, 214, 23, 154, 40, 216, 70, 92, 14, 214, 225, 225, 88, 225, 162, 156, 205, 176, 59, 118, 240, 11, 37, 150, 136, 111, 25, 100, 80, 177, 111, 169, 201, 25, 148, 50, 209, 84, 65, 24, 206, 225, 225, 86, 230, 166, 138, 198, 191, 34, 116, 240, 21, 60, 135, 157, 96, 4]
sifras2 = [149, 152, 24, 171, 184, 180, 119, 172, 220, 76, 56, 189, 87, 117, 189, 130, 117, 33, 250, 235, 242, 28, 121, 10, 5, 58, 218, 158, 1, 167, 17, 85, 98, 58, 75, 194, 155, 18, 250, 220, 115, 105, 148, 230, 154, 160, 87, 130, 94, 43, 252, 127, 212, 46, 170, 182, 232, 50, 8, 12, 184, 31, 91, 120, 51, 89, 223, 141, 10, 250, 220, 125, 110, 144, 240, 145, 175, 78, 128, 94, 53, 229, 110, 193, 33, 183]
sifras3 = [152, 58, 221, 87, 65, 24, 198, 254, 251, 68, 224, 176, 139, 192, 167, 55, 120, 245, 5, 35, 128, 136, 107, 30, 106, 73, 170, 121, 164, 214, 23, 154, 40, 216, 70, 92, 14, 214, 225, 225, 88, 225, 162, 156, 205, 176, 59, 118, 240, 11, 37, 150, 136, 111, 25, 100, 80, 177, 111, 169, 201, 25, 148, 50, 209, 84, 65, 24, 206, 225, 225, 86, 230, 166, 138, 198, 191, 34, 116, 240, 21, 60, 135, 157, 96, 4]

p = 0.1
print "sifras 1"
runTests(sifras1, p)

print "\nsifras 2"
runTests(sifras2, p)

print "\nsifras 3"
runTests(sifras3, p)


print "\ntekstas"
c = [1, 0, 1, 1, 0, 1, 0, 1]
x0 = c
cp=str_cipher(sifras1,c,x0)
print ''.join(chr(i) for i in cp)
runTests(cp, p)

import numpy as np

def getPossibleKeys(knownPart, size):
    #if size - len(knownPart) <> 1:
    #    return []
    #return [1]
    #tingiu skaiciuot. Is kvadrato pozicijas paskaiciuoju ranka
    return [1, 7, 8, 14]

def decodeFleissner(cipher, key):
    cipher = cipher.replace(' ', '')
    cipher = cipher.replace('\n', '')
    cipher = cipher.replace('\t', '')
    cip = [cipher[i:i+len(key)^2] for i in range(0, len(cipher), len(key)^2)] 
    key = sorted(key)
    text = unicode("", 'utf-8')
    for c in cip:
        for i in range (0, len(c)):
            text += c[key[i%len(key)]]
            if i == 5:
                print c[key[0]]
            if i%len(key) == 3:
                key = sorted(rotate(key))     
    return text

def rotate(key):
    keys = [[0, 0]]*len(key)
    kopija = keys
    for i in range (0, len(key)):
        keys[i] = [key[i]/len(key), key[i]%len(key)]
    for i in range (0, len(keys)):
        kopija[i] = [keys[i][1], len(key)-1-keys[i][0]]
        key[i] = keys[i][0]*len(key)+keys[i][1]
    key = sorted(key)
    return key
    
size = 4
keyPart = [3, 4, 5]
cipher = unicode("""NEADUNMDLTIAUTTO
ERIILTBAŠVKAPIRA
IAOENĄKTENLEKTĮB
MŪKTRIŠOLSŪŽOŲTĮ
IOMVEŽAIEKBERŠSK
TAĘTJUOPIDKASAIO
ITSDĖJIOAVBUDAUA""", 'utf-8')
#cipher = unicode("KLSABAVAATARAUSK", 'utf-8')

possibleKeys = getPossibleKeys(keyPart, size)
for k in possibleKeys:
    new = sorted(np.append(keyPart, k))              
    text = decodeFleissner(cipher, new)
    print text
